{"version":3,"sources":["store/index.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["initialState","app_name","version","author","react_logo","logo_project_url","base_url","my_setting","url_home_portofolio","store","createStore","state","action","type","byte","NavbarState","connect","dispatch","onClick","payload","class","color","size","viewBox","xmlns","d","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i0BAEA,IAAMA,EAAe,CACnBC,SAAU,6BACVC,QAAS,MACTC,OAAQ,YACRC,WAAY,6CACZC,iBACE,oFACFC,SAAU,+BACVC,WACE,4FACFC,oBACE,0EAYWC,EATDC,aAAY,WAAmC,IAAlCC,EAAiC,uDAAzBX,EAAcY,EAAW,uCAC1D,OAAQA,EAAOC,MACb,IAAK,aACH,OAAO,EAAP,GAAYF,EAAZ,CAAmBG,KAAMH,EAAMG,KAAO,IACxC,QACE,OAAOH,M,sBCQb,IAWeI,EADKC,aAVI,SAAAL,GACtB,MAAO,CACLA,YAIuB,SAAAM,GAAQ,MAAK,CACtCC,QAAS,kBAAMD,EAAS,CAAEJ,KAAM,aAAcM,QAAS,QAGrCH,EAnCpB,YAA4B,IAAVL,EAAS,EAATA,MAChB,OACE,yBAAKS,MAAM,+DACT,yBAAKA,MAAM,mDACT,kBAAC,cAAD,CAAaC,MAAM,QAAQC,KAAK,OAChC,0BAAMF,MAAM,6CACTT,EAAMV,WAGX,yBAAKmB,MAAM,mBACT,4BAAQA,MAAM,gHACZ,yBACEA,MAAM,uBACNG,QAAQ,YACRC,MAAM,8BAEN,uCACA,0BAAMC,EAAE,uDCVLC,MAPf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAUxB,MAAOA,GACf,kBAAC,EAAD,OAEFyB,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/js/andriawan.main.js","sourcesContent":["import { createStore } from 'redux';\r\n\r\nconst initialState = {\r\n  app_name: 'Andriawan React Collection',\r\n  version: '0.1',\r\n  author: 'Andriawan',\r\n  react_logo: 'https://cdn2.auth0.com/blog/vuejs/logo.png',\r\n  logo_project_url:\r\n    'https://raw.githubusercontent.com/andriawan/my-vue-portofolio/master/assets/icon/',\r\n  base_url: 'https://react.andriawan.com/',\r\n  my_setting:\r\n    'https://raw.githubusercontent.com/andriawan/my-vue-portofolio/master/docs/my_setting.json',\r\n  url_home_portofolio:\r\n    'https://api.github.com/repos/andriawan/my-vue-portofolio/contents/docs',\r\n};\r\n\r\nconst store = createStore((state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'CONVERT_KB':\r\n      return { ...state, byte: state.byte + 8 };\r\n    default:\r\n      return state;\r\n  }\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { AtomSpinner } from 'react-epic-spinners/dist/react-epic-spinners.cjs';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction Navbar({ state }) {\r\n  return (\r\n    <nav class=\"flex items-center justify-between flex-wrap bg-teal-500 p-3\">\r\n      <div class=\"flex items-center flex-shrink-0 text-white mr-6\">\r\n        <AtomSpinner color=\"white\" size=\"40\" />\r\n        <span class=\"px-2 font-semibold text-xl tracking-tight\">\r\n          {state.app_name}\r\n        </span>\r\n      </div>\r\n      <div class=\"block lg:hidden\">\r\n        <button class=\"flex items-center px-3 py-2 border rounded text-teal-200 border-teal-400 hover:text-white hover:border-white\">\r\n          <svg\r\n            class=\"fill-current h-3 w-3\"\r\n            viewBox=\"0 0 20 20\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <title>Menu</title>\r\n            <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\r\n          </svg>\r\n        </button>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    state,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onClick: () => dispatch({ type: 'CONVERT_KB', payload: 8 }),\r\n});\r\n\r\nconst NavbarState = connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\nexport default NavbarState;\r\n","import React from 'react';\nimport './styles.css';\nimport Navbar from './components/Navbar';\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}