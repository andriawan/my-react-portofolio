{"version":3,"sources":["store/index.js","components/Navbar.js","components/ProjectList.js","App.js","serviceWorker.js","index.js"],"names":["initialState","app_name","version","author","react_logo","logo_project_url","base_url","my_setting","url_home_portofolio","store","createStore","state","action","type","byte","NavbarState","connect","dispatch","onClick","payload","className","color","size","ProjectList","name","banner","link","animationDelay","alt","src","href","AppState","useState","projects","setProjects","setting","setSetting","useEffect","a","fetch","json_project","json_setting","json","initialSetup","length","projects_filter","filter","item","excluded_folder","includes","console","log","map","key","generateProjectList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i0BAEA,IAAMA,EAAe,CACnBC,SAAU,6BACVC,QAAS,MACTC,OAAQ,YACRC,WACE,0FACFC,iBACE,sFACFC,SAAU,+BACVC,WACE,yFACFC,oBACE,4EAYWC,EATDC,aAAY,WAAmC,IAAlCC,EAAiC,uDAAzBX,EAAcY,EAAW,uCAC1D,OAAQA,EAAOC,MACb,IAAK,aACH,OAAO,EAAP,GAAYF,EAAZ,CAAmBG,KAAMH,EAAMG,KAAO,IACxC,QACE,OAAOH,M,wDCLb,IAWeI,EADKC,aAVI,SAAAL,GACtB,MAAO,CACLA,YAIuB,SAAAM,GAAQ,MAAK,CACtCC,QAAS,kBAAMD,EAAS,CAAEJ,KAAM,aAAcM,QAAS,QAGrCH,EAvBpB,YAA4B,IAAVL,EAAS,EAATA,MAChB,OACE,yBAAKS,UAAU,+DACb,yBAAKA,UAAU,mDACb,kBAAC,cAAD,CAAaC,MAAM,QAAQC,KAAM,KACjC,0BAAMF,UAAU,6CACbT,EAAMV,eC2BFsB,EAlCK,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,KAAjB,OAClB,yBAAKN,UAAU,8EACb,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,wDACb,yBAAKA,UAAU,0BACb,6BACE,kBAAC,oBAAD,CACEA,UAAU,eACVO,eAAe,OACfL,KAAM,GACND,MAAM,YAIZ,yBACED,UAAU,wCACVQ,IAAI,OACJC,IAAKJ,MAIX,yBAAKL,UAAU,qDAAf,kBACkBI,GAElB,yBAAKJ,UAAU,QACb,uBAAGU,KAAMJ,GACP,4BAAQN,UAAU,6FAAlB,oBCyBR,IAOeW,EADEf,aANO,SAAAL,GACtB,MAAO,CACLA,WAIsC,KAAzBK,EAtDjB,YAAyB,IAAVL,EAAS,EAATA,MAAS,EACUqB,mBAAS,IADnB,mBACfC,EADe,KACLC,EADK,OAEQF,mBAAS,GAFjB,mBAEfG,EAFe,KAENC,EAFM,KAsCtB,OAlCAC,qBAAU,WAAM,4CACd,8BAAAC,EAAA,sEAC6BC,MAAM5B,EAAMH,qBADzC,cACQgC,EADR,gBAE6BD,MAAM5B,EAAMJ,YAFzC,cAEQkC,EAFR,YAGEP,EAHF,SAGoBM,EAAaE,OAHjC,8CAIEN,EAJF,UAImBK,EAAaC,OAJhC,gFADc,uBAAC,WAAD,wBAOdC,KACC,CAAChC,IA2BF,6BACE,kBAAC,EAAD,MACA,yBAAKS,UAAU,qCA3BnB,SAA6Ba,EAAUE,GACrC,GAAIF,EAASW,OAAS,GAAiB,IAAZT,EAAe,CACxC,IAAMU,EAAkBZ,EAASa,QAC/B,SAAAC,GAAI,MACY,QAAdA,EAAKlC,OAAmBsB,EAAQa,gBAAgBC,SAASF,EAAKvB,SAclE,OAXA0B,QAAQC,IAAIN,GAECA,EAAgBO,KAAI,SAACL,EAAMM,GAAP,OAC/B,yBAAKjC,UAAU,wDACb,kBAAC,EAAD,CACEI,KAAMuB,EAAKvB,KACXE,KAAMqB,EAAKvB,KACXC,OAAQd,EAAMP,iBAMpB,OAAO,yCAQJkD,CAAoBrB,EAAUE,QCpCnBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAD,CAAUpD,MAAOA,GACf,kBAAC,EAAD,OAEFqD,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/js/andriawan.main.js","sourcesContent":["import { createStore } from 'redux';\r\n\r\nconst initialState = {\r\n  app_name: 'Andriawan React Collection',\r\n  version: '0.1',\r\n  author: 'Andriawan',\r\n  react_logo:\r\n    'https://raw.githubusercontent.com/andriawan/my-react-portofolio/master/assets/react.png',\r\n  logo_project_url:\r\n    'https://raw.githubusercontent.com/andriawan/my-react-portofolio/master/assets/icon/',\r\n  base_url: 'https://react.andriawan.com/',\r\n  my_setting:\r\n    'https://raw.githubusercontent.com/andriawan/my-react-portofolio/master/my_setting.json',\r\n  url_home_portofolio:\r\n    'https://api.github.com/repos/andriawan/my-react-portofolio/contents/docs',\r\n};\r\n\r\nconst store = createStore((state = initialState, action) => {\r\n  switch (action.type) {\r\n    case 'CONVERT_KB':\r\n      return { ...state, byte: state.byte + 8 };\r\n    default:\r\n      return state;\r\n  }\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport { AtomSpinner } from 'react-epic-spinners/dist/react-epic-spinners.cjs';\r\nimport { connect } from 'react-redux';\r\n\r\nfunction Navbar({ state }) {\r\n  return (\r\n    <nav className=\"flex items-center justify-between flex-wrap bg-teal-500 p-3\">\r\n      <div className=\"flex items-center flex-shrink-0 text-white mr-6\">\r\n        <AtomSpinner color=\"white\" size={40} />\r\n        <span className=\"px-2 font-semibold text-xl tracking-tight\">\r\n          {state.app_name}\r\n        </span>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    state,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onClick: () => dispatch({ type: 'CONVERT_KB', payload: 8 }),\r\n});\r\n\r\nconst NavbarState = connect(mapStateToProps, mapDispatchToProps)(Navbar);\r\nexport default NavbarState;\r\n","import React from 'react';\r\nimport { HalfCircleSpinner } from 'react-epic-spinners/dist/react-epic-spinners.cjs';\r\n\r\nconst ProjectList = ({ name, banner, link }) => (\r\n  <div className=\"rounded overflow-hidden dark:bg-gray-800 shadow hover:shadow-lg border-box\">\r\n    <div className=\"relative h-64 sm:h-48\">\r\n      <div className=\"absolute flex items-center w-full h-full bg-gray-600\">\r\n        <div className=\"flex-1 text-center w-1\">\r\n          <div>\r\n            <HalfCircleSpinner\r\n              className=\"inline-block\"\r\n              animationDelay=\"1000\"\r\n              size={30}\r\n              color=\"#ffff\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <img\r\n          className=\"w-full h-full object-contain absolute\"\r\n          alt=\"test\"\r\n          src={banner}\r\n        />\r\n      </div>\r\n    </div>\r\n    <div className=\"text-sm dark:text-white sm:text-md mt-3 pr-3 pl-3\">\r\n      Project Name : {name}\r\n    </div>\r\n    <div className=\"px-3\">\r\n      <a href={link}>\r\n        <button className=\"w-full bg-teal-500 hover:bg-teal-700 text-sm text-white py-2 rounded mt-3 mb-3 border-box\">\r\n          Open project\r\n        </button>\r\n      </a>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default ProjectList;\r\n","import React, { useState, useEffect } from 'react';\nimport './styles.css';\nimport Navbar from './components/Navbar';\nimport ProjectList from './components/ProjectList';\nimport { connect } from 'react-redux';\n\nfunction App({ state }) {\n  const [projects, setProjects] = useState([]);\n  const [setting, setSetting] = useState(0);\n\n  useEffect(() => {\n    async function initialSetup() {\n      const json_project = await fetch(state.url_home_portofolio);\n      const json_setting = await fetch(state.my_setting);\n      setProjects(await json_project.json());\n      setSetting(await json_setting.json());\n    }\n    initialSetup();\n  }, [state]);\n\n  function generateProjectList(projects, setting) {\n    if (projects.length > 0 && setting !== 0) {\n      const projects_filter = projects.filter(\n        item =>\n          item.type === 'dir' && !setting.excluded_folder.includes(item.name)\n      );\n\n      console.log(projects_filter);\n\n      const List = projects_filter.map((item, key) => (\n        <div className=\"w-full sm:w-1/2 lg:w-1/4 xl:w-1/5 md:w-1/3 px-3 py-3\">\n          <ProjectList\n            name={item.name}\n            link={item.name}\n            banner={state.react_logo}\n          />\n        </div>\n      ));\n      return List;\n    } else {\n      return <p>Loading...</p>;\n    }\n  }\n\n  return (\n    <div>\n      <Navbar />\n      <div className=\"flex flex-wrap mx-auto p-3 sm:p-8\">\n        {generateProjectList(projects, setting)}\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst AppState = connect(mapStateToProps, null)(App);\nexport default AppState;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}