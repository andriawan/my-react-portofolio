{"version":3,"sources":["components/Input.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","data","onInputChange","handleChange","e","type","target","value","style","background","className","onChange","bytes","placeholder","kiloBytes","megaBytes","Result","gigaBytes","App","useState","setData","input","isNaN","parseInt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAmDeA,MAjDf,SAAeC,GAAQ,IACbC,EAAwBD,EAAxBC,KAAMC,EAAkBF,EAAlBE,cAERC,EAAe,SAACC,EAAGC,GACvBH,EAAcE,EAAEE,OAAOC,MAAOF,IAGhC,OACE,yBACEG,MAAO,CACLC,WACE,kGAEJC,UAAU,+CAEV,yBAAKA,UAAU,cACb,uBAAGA,UAAU,6CAAb,QACA,2BACEA,UAAU,iIACVL,KAAK,OACLM,SAAU,SAAAP,GAAC,OAAID,EAAaC,EAAG,SAC/BG,MAAON,EAAKW,MACZC,YAAY,UAGhB,yBAAKH,UAAU,cACb,uBAAGA,UAAU,6CAAb,aACA,2BACEA,UAAU,iIACVL,KAAK,OACLM,SAAU,SAAAP,GAAC,OAAID,EAAaC,EAAG,cAC/BG,MAAON,EAAKa,UACZD,YAAY,eAGhB,yBAAKH,UAAU,cACb,uBAAGA,UAAU,6CAAb,aACA,2BACEA,UAAU,iIACVL,KAAK,OACLM,SAAU,SAAAP,GAAC,OAAID,EAAaC,EAAG,cAC/BG,MAAON,EAAKc,UACZF,YAAY,iBCOPG,MAjDf,SAAgBhB,GAAQ,IACdC,EAASD,EAATC,KAER,OACE,6BACE,yBAAKS,UAAU,wBACb,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,qCACb,yBAAKA,UAAU,kCACb,uBAAGA,UAAU,qDACVT,EAAKW,MADR,SAMN,yBAAKF,UAAU,2CACb,yBAAKA,UAAU,0CACb,yBAAKA,UAAU,kCACb,uBAAGA,UAAU,qDACVT,EAAKa,UADR,WAOR,yBAAKJ,UAAU,2BACb,yBAAKA,UAAU,2CACb,yBAAKA,UAAU,0CACb,yBAAKA,UAAU,kCACb,uBAAGA,UAAU,qDACVT,EAAKc,UADR,UAMN,yBAAKL,UAAU,2CACb,yBAAKA,UAAU,0CACb,yBAAKA,UAAU,kCACb,uBAAGA,UAAU,qDACVT,EAAKgB,UADR,a,MCwBCC,MA3Df,WACE,IADa,EAQWC,mBAPL,CACjBP,MAAO,EACPE,UAAW,EACXC,UAAW,EACXE,UAAW,IALA,mBAQNhB,EARM,KAQAmB,EARA,KA8Cb,OACE,yBAAKV,UAAU,wBACb,yBAAKA,UAAU,uCACb,uBAAGA,UAAU,yCAAb,oBAGA,kBAAC,EAAD,CAAOT,KAAMA,EAAMC,cA1CzB,SAAuBmB,EAAOhB,GACxBiB,MAAMC,SAASF,MACjBA,EAAQ,GAGG,SAAThB,GACFe,EAAQ,eACHnB,EADE,CAELc,UAAWQ,SAASF,GAAT,QACXT,MAAOW,SAASF,GAChBP,UAAWS,SAASF,GAAS,KAC7BJ,UAAWM,SAASF,GAAT,cAIF,cAAThB,GACFe,EAAQ,eACHnB,EADE,CAELc,UAAWQ,SAASF,GAAS,KAC7BT,MAAyB,KAAlBW,SAASF,GAChBP,UAAWS,SAASF,GACpBJ,UAAWM,SAASF,GAAT,WAIF,cAAThB,GACFe,EAAQ,eACHnB,EADE,CAELc,UAAWQ,SAASF,GACpBT,MAAO,QAAAW,SAASF,GAChBP,UAA6B,KAAlBS,SAASF,GACpBJ,UAAWM,SAASF,GAAS,WAY7B,kBAAC,EAAD,CAAQpB,KAAMA,OC9CFuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"js/andriawan.main.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Input(props) {\r\n  const { data, onInputChange } = props;\r\n\r\n  const handleChange = (e, type) => {\r\n    onInputChange(e.target.value, type);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        background:\r\n          \"linear-gradient(278deg, rgba(131,58,180,1) 0%, rgba(253,29,29,1) 50%, rgba(252,176,69,1) 100%)\"\r\n      }}\r\n      className=\"rounded-lg shadow h-full py-5 bg-white flex\"\r\n    >\r\n      <div className=\"w-1/3 mx-3\">\r\n        <p className=\"text-xs lg:text-base py-1 text-yellow-800\">Byte</p>\r\n        <input\r\n          className=\"bg-transparent placeholder-white focus:outline-none border border-yellow-400 rounded-lg py-2 px-4 block w-full text-yellow-800\"\r\n          type=\"text\"\r\n          onChange={e => handleChange(e, \"byte\")}\r\n          value={data.bytes}\r\n          placeholder=\"Byte\"\r\n        />\r\n      </div>\r\n      <div className=\"w-1/3 mx-3\">\r\n        <p className=\"text-xs lg:text-base py-1 text-yellow-500\">Kilo Byte</p>\r\n        <input\r\n          className=\"bg-transparent placeholder-white focus:outline-none border border-yellow-400 rounded-lg py-2 px-4 block w-full text-yellow-500\"\r\n          type=\"text\"\r\n          onChange={e => handleChange(e, \"kilo_byte\")}\r\n          value={data.kiloBytes}\r\n          placeholder=\"Kilo Byte\"\r\n        />\r\n      </div>\r\n      <div className=\"w-1/3 mx-3\">\r\n        <p className=\"text-xs lg:text-base py-1 text-yellow-500\">Mega Byte</p>\r\n        <input\r\n          className=\"bg-transparent placeholder-white focus:outline-none border border-yellow-400 rounded-lg py-2 px-4 block w-full text-yellow-500\"\r\n          type=\"text\"\r\n          onChange={e => handleChange(e, \"mega_byte\")}\r\n          value={data.megaBytes}\r\n          placeholder=\"Mega Byte\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nfunction Result(props) {\r\n  const { data } = props;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"lg:h-48 mt-3 lg:flex\">\r\n        <div className=\"rounded-lg bg-gray-300 lg:w-1/2 lg:mr-1\">\r\n          <div className=\"flex items-stretch h-20 lg:h-full\">\r\n            <div className=\"self-center flex-1 text-center\">\r\n              <p className=\"text-base lg:text-3xl text-gray-800 overflow-auto\">\r\n                {data.bytes} B\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"rounded-lg bg-gray-300 lg:w-1/2 lg:ml-1\">\r\n          <div className=\"flex items-stretch mt-2 h-20 lg:h-full\">\r\n            <div className=\"self-center flex-1 text-center\">\r\n              <p className=\"text-base lg:text-3xl text-gray-800 overflow-auto\">\r\n                {data.kiloBytes} KB\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"lg:h-48 lg:mt-2 lg:flex\">\r\n        <div className=\"rounded-lg bg-gray-300 lg:w-1/2 lg:mr-1\">\r\n          <div className=\"flex items-stretch mt-2 h-20 lg:h-full\">\r\n            <div className=\"self-center flex-1 text-center\">\r\n              <p className=\"text-base lg:text-3xl text-gray-800 overflow-auto\">\r\n                {data.megaBytes} MB\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"rounded-lg bg-gray-300 lg:w-1/2 lg:ml-1\">\r\n          <div className=\"flex items-stretch mt-2 h-20 lg:h-full\">\r\n            <div className=\"self-center flex-1 text-center\">\r\n              <p className=\"text-base lg:text-3xl text-gray-800 overflow-auto\">\r\n                {data.gigaBytes} GB\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Result;\r\n","import React, { useState } from \"react\";\nimport Input from \"./components/Input\";\nimport Result from \"./components/Result\";\nimport \"./styles.css\";\n\nfunction App() {\n  const initalData = {\n    bytes: 0,\n    kiloBytes: 0,\n    megaBytes: 0,\n    gigaBytes: 0\n  };\n\n  const [data, setData] = useState(initalData);\n\n  function setConversion(input, type) {\n    if (isNaN(parseInt(input))) {\n      input = 0;\n    }\n\n    if (type === \"byte\") {\n      setData({\n        ...data,\n        megaBytes: parseInt(input) / (1024 * 1024),\n        bytes: parseInt(input),\n        kiloBytes: parseInt(input) / 1024,\n        gigaBytes: parseInt(input) / (1024 * 1024 * 1024)\n      });\n    }\n\n    if (type === \"kilo_byte\") {\n      setData({\n        ...data,\n        megaBytes: parseInt(input) / 1024,\n        bytes: parseInt(input) * 1024,\n        kiloBytes: parseInt(input),\n        gigaBytes: parseInt(input) / (1024 * 1024)\n      });\n    }\n\n    if (type === \"mega_byte\") {\n      setData({\n        ...data,\n        megaBytes: parseInt(input),\n        bytes: parseInt(input) * (1024 * 1024),\n        kiloBytes: parseInt(input) * 1024,\n        gigaBytes: parseInt(input) / 1024\n      });\n    }\n  }\n\n  return (\n    <div className=\"bg-gray-500 h-screen\">\n      <div className=\"container mx-auto px-3 pb-3 lg:pt-5\">\n        <p className=\"text-2xl lg:text-4xl text-center pb-2\">\n          AndDataConverter\n        </p>\n        <Input data={data} onInputChange={setConversion} />\n        <Result data={data} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}